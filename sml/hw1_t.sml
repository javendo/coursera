val dates=[(2012,1,1),(2012,1,23),(2012,3,4),(2012,6,3),(2012,6,3),(2012,6,28)];
val numbers=[31,28,31,30,31,30,31,31,30,31,30,31];
val dt=oldest(dates);
"is_older";
is_older((2012,5,1),(2012,6,3));
is_older((2012,5,1),(2012,5,1)) = false;
is_older((2012,6,1),(2012,5,3)) = false;
is_older((1,2,98),(1,17,83))=true;
is_older((1,2,98),(6,7,8))=true;
"number_in_month";
number_in_month(dates,1)=2;
number_in_month(dates,3)=1;
number_in_month(dates,6)=3;
number_in_month(dates,10)=0;
"number_in_months";
number_in_months(dates,[1,2])=2;
number_in_months(dates,[3,6])=4;
number_in_months(dates,[6,10])=3;
number_in_months(dates,[10,11])=0;
"dates_in_month";
length(dates_in_month(dates,1))=2;
length(dates_in_month(dates,3))=1;
length(dates_in_month(dates,6))=3;
length(dates_in_month(dates,10))=0;
"dates_in_months";
length(dates_in_months(dates,[1,2]))=2;
length(dates_in_months(dates,[3,6]))=4;
length(dates_in_months(dates,[6,10]))=3;
length(dates_in_months(dates,[10,11]))=0;
"get_nth";
get_nth(["alpha","beta","gamma","theta"],1)="alpha";
get_nth(["alpha","beta","gamma","theta"],4)="theta";
"date_to_string";
date_to_string((2012,1,1))="January 1, 2012";
date_to_string((2010,11,4))="November 4, 2010";
"number_before_reaching_sum";
number_before_reaching_sum(1,numbers)=0;
number_before_reaching_sum(31,numbers)=0;
number_before_reaching_sum(32,numbers)=1;
number_before_reaching_sum(360,numbers)=11;
number_before_reaching_sum(365,numbers)=11;
number_before_reaching_sum(366,numbers)=12;
number_before_reaching_sum(5,[3,2,2])=1;
number_before_reaching_sum(6,[4,1,1,1])=2;
number_before_reaching_sum(10,[1,2,3,4,5])=3;
"what_month";
what_month(1)=1;
what_month(31)=1;
what_month(32)=2;
what_month(360)=12;
what_month(365)=12;
what_month(366)=13;
"month_range";
hd(month_range(31,32))=1;
hd(tl(month_range(31,32)))=2;
hd(month_range(59,60))=2;
hd(tl(month_range(59,60)))=3;
hd(month_range(365,366))=12;
hd(tl(month_range(365,367)))=13;
hd(tl(tl(month_range(365,367))))=13;
"oldest";
isSome(dt);
valOf(dt)=(2012,1,1);
isSome(oldest([]))=false;
valOf(oldest([(~4,2,3),(2,2,3),(5,2,3),(~3,2,3)]))=(~4,2,3);
valOf(oldest([(5,5,2),(5,10,2),(5,2,2),(5,12,2)]))=(5,2,2);
valOf(oldest([(5,12,15),(5,12,10),(5,12,1)]))=(5,12,1);
"reasonable_date";
reasonable_date(2012,1,31)=true;
reasonable_date(2012,13,1)=false;
reasonable_date(2012,11,31)=false;
reasonable_date(2012,2,28)=true;
reasonable_date(2012,2,29)=true;
reasonable_date(2013,1,31)=true;
reasonable_date(0,1,1)=false;
reasonable_date(2013,11,31)=false;
reasonable_date(2013,2,28)=true;
reasonable_date(2013,2,29)=false;
reasonable_date(2100,1,31)=true;
reasonable_date(2100,1,0)=false;
reasonable_date(2100,11,31)=false;
reasonable_date(2100,2,28)=true;
reasonable_date(2100,2,29)=false;
reasonable_date(2400,1,31)=true;
reasonable_date(2400,13,1)=false;
reasonable_date(2400,11,31)=false;
reasonable_date(2400,2,28)=true;
reasonable_date(2400,2,29)=true;
"remove_duplicates";
length(remove_duplicates([1,2,3,4,3,2,4,5,6,1,2,3,4,3,4,5,7,8,8,7,9]))=9;
"dates_in_months_challenge";
length(dates_in_months_challenge(dates,[1,2,2,1,2,2,2,1,2,2,2,1,1,1]))=2;
length(dates_in_months_challenge(dates,[3,6,6,6,6,6,6,6,3,3,3,3,6,3,6]))=4;
length(dates_in_months_challenge(dates,[6,10,6,6,6,6,6,6,10,10,10,6,10,10,6]))=3;
length(dates_in_months_challenge(dates,[10,11,10,10,10,11,11,11,11,11,11,10]))=0;
"number_in_months_challenge";
number_in_months_challenge(dates,[1,2,2,1,2,2,2,1,2,2,2,1,1,1])=2;
number_in_months_challenge(dates,[3,6,6,6,6,6,6,6,3,3,3,3,6,3,6])=4;
number_in_months_challenge(dates,[6,10,6,6,6,6,6,6,10,10,10,6,10,10,6])=3;
number_in_months_challenge(dates,[10,11,10,10,10,11,11,11,11,11,11,10])=0;
